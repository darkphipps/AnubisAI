import anpu_talk
import anpu_listen
import anpu_speak
import textwrap
from anpu_improve import improve_response_with_ontology, improve_response_with_mind
from anpu_storage import create_or_reuse_database, OntologyStorage, MindStorage
import pyttsx3
from anpu_storage import AnpuStorage
import anpu_god_chat

# Set speaker name
speaker_name = "Morgan"

# Create or reuse the anpu_conversations.db database
create_or_reuse_database()

# Prompt the user for persona name
while True:
    persona_name = input("Enter the name of the god you want to generate a persona for (default: Anubis): ")
    if not persona_name:
        persona_name = "Anubis"
        break
    else:
        persona = anpu_god_chat.get_persona(persona_name=persona_name)
        if persona:
            break
        else:
            print(f"Invalid persona name '{persona_name}'. Please try again.")

# Prompt the user for input mode
while True:
    mode = input("Enter 's' to use speech recognition, or 't' to type your input: ")
    if mode == "s" or mode == "t":
        break
    else:
        print("Invalid input. Please enter 's' or 't'.")

if mode == "s":
    output_format = "voice"
else:
    output_format = "text"

def speak_response(response_text, mode, speaker_name):
    """
    Speaks or prints the response based on the selected output format.
    """
    if mode == "voice":
        # Speak the response
        anpu_speak.speak(response_text, speaker_name=speaker_name)
    else:
        # Print the response
        print(response_text)


def get_user_input():
    """
    Gets user input either through speech recognition or text input,
    depending on the current mode.
    """
    global mode

    if mode == "s":
        # Listen for speech input
        while True:
            user_input = anpu_listen.listen()
            if user_input is None:
                # If no speech is detected, return an empty string
                return ""
            elif "type" in user_input:
                # Switch to text input mode if the user says "type"
                print("Switching to text input mode...")
                mode = "t"
                return anpu_listen.listen_text()
            else:
                return user_input
    else:
        # Get input from the user using text input
        return input("Enter your message: ")


# Initialize text-to-speech engine
speaker = pyttsx3.init()

while True:
    # Get input from user using the selected input mode
    user_input = get_user_input()

    # Pass the user input and persona to the AnpuTalk function and get the response
    response_text = anpu_talk.anpu_talk(user_input, persona_name=persona_name)

    # Store the conversation in the database
    storage = AnpuStorage()
    storage.store_conversation(user_input, response_text)

    # Speak or print the response based on the selected output format
    if not user_input:
        # If user_input is empty, skip the response and ask for input again
        continue
    elif not response_text:
        # If AnpuTalk couldn't understand the input, speak a message to the user
        speak_response("Sorry, I couldn't understand what you said.", mode=output_format, speaker_name=speaker_name)
    else:
        # Improve the response with the ontology database
        response = improve_response_with_ontology(user_input, response_text)

        # Print the response

        # Print the response generated by the generate_response function
        print(response)

        # Improve the response further with the mind database
        response = improve_response_with_mind(response, speaker_name)

        # Speak or print the final response
        speak_response(response, mode=output_format, speaker_name=speaker_name)

